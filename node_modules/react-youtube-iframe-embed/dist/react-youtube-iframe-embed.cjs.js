'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var jsxstyle = require('jsxstyle');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

var emptyFunction_1 = emptyFunction;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

var invariant_1 = invariant;

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var factoryWithThrowingShims = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    invariant_1(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction_1;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof$2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof$2(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

/**
 * Responsive, intrinsic ratio or percentage embeds
 */

var FlexEmbed = function (_Component) {
  _inherits(FlexEmbed, _Component);

  function FlexEmbed() {
    _classCallCheck(this, FlexEmbed);

    return _possibleConstructorReturn(this, (FlexEmbed.__proto__ || Object.getPrototypeOf(FlexEmbed)).apply(this, arguments));
  }

  _createClass(FlexEmbed, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          ratio = _props.ratio,
          setRef = _props.setRef,
          children = _props.children,
          percentage = _props.percentage,
          props = _objectWithoutProperties(_props, ['ratio', 'setRef', 'children', 'percentage']);

      return React__default.createElement(jsxstyle.Block, _extends({ overflow: 'hidden', position: 'relative' }, props), React__default.createElement(jsxstyle.Block, { width: '100%', paddingBottom: percentage || ratio * 100 + '%' }), React__default.createElement(jsxstyle.Block, {
        top: '0',
        left: '0',
        props: { ref: setRef },
        width: '100%',
        height: '100%',
        bottom: '0',
        position: 'absolute' }, children));
    }
  }]);

  return FlexEmbed;
}(React.Component);

FlexEmbed.propTypes = {
  /**
   * Ratio for embed innards, e.g. `3 / 4`, `9 / 16`, `0.75`
   */
  ratio: propTypes.number,
  /**
   * @ignore
   */
  setRef: propTypes.func,
  /**
   * @ignore
   */
  children: propTypes.any,
  /**
   * Percentage of embed innards' width / height ratio, e.g. 75%
   */
  percentage: propTypes.string
};
FlexEmbed.defaultProps = {
  ratio: 1
};

var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var defaultValue = { isReady: false };

var _createContext = React.createContext(defaultValue),
    Provider = _createContext.Provider,
    Consumer = _createContext.Consumer;

var YouTubeIframeAPIProvider = function (_Component) {
  _inherits$1(YouTubeIframeAPIProvider, _Component);

  function YouTubeIframeAPIProvider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck$1(this, YouTubeIframeAPIProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn$1(this, (_ref = YouTubeIframeAPIProvider.__proto__ || Object.getPrototypeOf(YouTubeIframeAPIProvider)).call.apply(_ref, [this].concat(args))), _this), _this.state = defaultValue, _temp), _possibleConstructorReturn$1(_this, _ret);
  }

  _createClass$1(YouTubeIframeAPIProvider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var tag = document.createElement('script');
      tag.id = 'ytapi';
      tag.src = 'https://www.youtube.com/player_api';

      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      window.onYouTubeIframeAPIReady = function () {
        return _this2.setState({ isReady: true });
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return React__default.createElement(
        Provider,
        { value: this.state },
        children
      );
    }
  }]);

  return YouTubeIframeAPIProvider;
}(React.Component);

/**
 * Embed YouTube video
 */
YouTubeIframeAPIProvider.propTypes = {
  children: propTypes.any.isRequired
};

var YouTubeEmbed = function (_Component2) {
  _inherits$1(YouTubeEmbed, _Component2);

  function YouTubeEmbed() {
    var _ref2;

    var _temp2, _this3, _ret2;

    _classCallCheck$1(this, YouTubeEmbed);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn$1(this, (_ref2 = YouTubeEmbed.__proto__ || Object.getPrototypeOf(YouTubeEmbed)).call.apply(_ref2, [this].concat(args))), _this3), _initialiseProps.call(_this3), _temp2), _possibleConstructorReturn$1(_this3, _ret2);
  }

  _createClass$1(YouTubeEmbed, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.player) {
        this.player.destroy();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref3) {
      var videoId = _ref3.videoId;

      if (videoId !== this.props.videoId) {
        this.player.cueVideoById(videoId);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var _props = this.props,
          width = _props.width,
          height = _props.height,
          portrait = _props.portrait,
          className = _props.className;


      return React__default.createElement(
        FlexEmbed,
        { ratio: portrait ? 16 / 9 : 9 / 16 },
        React__default.createElement(
          Consumer,
          null,
          function (_ref4) {
            var isReady = _ref4.isReady;
            return React__default.createElement('div', {
              ref: isReady ? _this4.setRef : undefined,
              style: { width: width || '100%', height: height || '100%' },
              className: className
            });
          }
        )
      );
    }
  }]);

  return YouTubeEmbed;
}(React.Component);

YouTubeEmbed.propTypes = {
  /**
   * Whether to play the single video or the entire playlist again and again
   */
  loop: propTypes.bool,
  /**
   * Play video muted
   */
  mute: propTypes.bool,
  /**
   * Embedded video player's width in PX, e.g. `640`
   */
  width: propTypes.number,
  /**
   * Embedded video player's height in PX, e.g. `390`
   */
  height: propTypes.number,
  /**
   * Embedded video's ID, e.g. `IjTBcqpl2kc`
   */
  videoId: propTypes.string.isRequired,
  /**
   * Play video automatically
   */
  autoPlay: propTypes.bool,
  /**
   * Whether the video player controls are displayed
   */
  controls: propTypes.bool,
  /**
   * Whether to play the video in portrait mode
   */
  portrait: propTypes.bool,
  /**
   * Player element's class names
   */
  className: propTypes.string,
  /**
   * Play video inline instead of full screen on mobile devices
   */
  playsInline: propTypes.bool,
  /**
   * Function to run when video is cued and ready to play
   */
  onCued: propTypes.func,
  /**
   * Function to run when video ended
   */
  onEnded: propTypes.func,
  /**
   * Function to run when player has finished loading and is ready to begin
   * receiving API calls
   */
  onReady: propTypes.func,
  /**
   * Function to run when video start to play for the first time
   */
  onStart: propTypes.func,
  /**
   * Function to run when video paused
   */
  onPaused: propTypes.func,
  /**
   * Function to run whenever video's state changed to playing
   */
  onPlaying: propTypes.func,
  /**
   * Function to run for every one second when video are playing
   */
  onProgress: propTypes.func,
  /**
   * Function to run when video's state changed to buffering
   */
  onBuffering: propTypes.func,
  /**
   * Function to run when the player first loads a video
   */
  onUnstarted: propTypes.func
};
YouTubeEmbed.defaultProps = {
  loop: false,
  mute: false,
  autoPlay: false,
  controls: true,
  portrait: false,
  playsInline: true,

  onCued: noop,
  onEnded: noop,
  onReady: noop,
  onPaused: noop,
  onPlaying: noop,
  onBuffering: noop,
  onUnstarted: noop
};

var _initialiseProps = function _initialiseProps() {
  var _this5 = this;

  this.onReady = function () {
    var _props2 = _this5.props,
        mute = _props2.mute,
        onReady = _props2.onReady,
        autoPlay = _props2.autoPlay;


    if (mute) {
      _this5.player.mute();
    }

    if (autoPlay) {
      var event = arguments.length <= 0 ? undefined : arguments[0];

      event.target.playVideo();
    }

    if (onReady) {
      onReady.apply(undefined, arguments);
    }
  };

  this.onStateChange = function (_ref5) {
    var data = _ref5.data;
    var _props3 = _this5.props,
        onStart = _props3.onStart,
        onProgress = _props3.onProgress;


    switch (data) {
      case 1:
        if (onProgress && !_this5.progress) {
          _this5.progress = setInterval(function () {
            onProgress(_this5.player.getCurrentTime());
          }, 1000);
        }

        if (onStart && !_this5.isStarted) {
          onStart();

          _this5.isStarted = true;
        }

        return _this5.props.onPlaying();

      case -1:
      case 0:
      case 5:
        /* reset started state */
        _this5.isStarted = false;

      // eslint-disable-line no-fallthrough
      default:
        if (onProgress && _this5.progress) {
          _this5.progress = clearInterval(_this5.progress);
        }

        switch (data) {
          case -1:
            return _this5.props.onUnstarted();
          case 0:
            return _this5.props.onEnded();
          case 2:
            return _this5.props.onPaused();
          case 3:
            return _this5.props.onBuffering();
          case 5:
            return _this5.props.onCued();
        }
    }
  };

  this.createPlayer = function (ref) {
    var _props4 = _this5.props,
        mute = _props4.mute,
        width = _props4.width,
        height = _props4.height,
        videoId = _props4.videoId,
        autoPlay = _props4.autoPlay,
        controls = _props4.controls,
        playsInline = _props4.playsInline;


    _this5.player = new window.YT.Player(ref, {
      width: width ? width.toString() : undefined,
      height: height ? height.toString() : undefined,
      events: {
        onReady: _this5.onReady,
        onStateChange: _this5.onStateChange
      },
      videoId: videoId,
      playerVars: {
        mute: mute ? 1 : 0,
        autoplay: autoPlay ? 1 : 0,
        controls: controls ? 1 : 0,
        playsinline: playsInline ? '1' : '0'
      }
    });
  };

  this.setRef = function (ref) {
    if (_this5.player) {
      _this5.player.destroy();
    }

    _this5.createPlayer(ref);
  };
};

exports.YouTubeIframeAPIProvider = YouTubeIframeAPIProvider;
exports.default = YouTubeEmbed;
//# sourceMappingURL=react-youtube-iframe-embed.cjs.js.map
